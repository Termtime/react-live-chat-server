{"version":3,"sources":["components/MessageContainer.js","components/OwnMessageContainer.js","resources/img/exit.svg","reducers/actions.js","containers/MessagesBox.js","components/MessagesBox.js","components/EmojiButton.js","components/MessageTextArea.js","containers/MessageTextArea.js","resources/img/user.svg","components/UserItem.js","containers/UserList.js","components/UserList.js","containers/App.js","App.js","containers/HomePage.js","pages/HomePage.js","reportWebVitals.js","reducers/index.js","index.js"],"names":["MessageContainer","props","className","user","username","message","body","time","OwnMessageContainer","USER_JOINED","DISCONNECTED","RECEIVED_MSG","CONNECT","INITIALIZE","JOIN_ROOM","IS_TYPING","STOPPED_TYPING","connectedComponent","connect","state","messages","users","ownUser","roomId","dispatch","disconnect","type","connection","history","useHistory","style","lineHeight","length","alt","id","src","exit","onClick","push","map","msg","i","EmojiButton","appendEmoji","useState","isActive","setIsActive","onEmojiClick","e","timeout","socket","setMessage","sendMessage","preventDefault","trim","messageObject","date","Date","toLocaleTimeString","current","emit","stoppedTyping","clearTimeout","handleChange","setTimeout","target","value","alignItems","onSubmit","rows","onInput","onKeyDown","keyCode","shiftKey","placeholder","event","emojiObject","emoji","UserItem","isCurrentUser","index","socketREF","typingUsers","connectToServer","payload","initialize","receivedMessage","updateUserlist","userlist","addTypingUser","typingUser","removeTypingUser","useRef","usersREF","ownUserREF","useEffect","require","config","io","on","console","log","room","updatedUserList","currentUserEntryIndex","findIndex","find","obj","undefined","close","document","querySelector","scrollTo","scrollHeight","string","usersMinusLast","pop","join","renderTypingUsers","setRoom","setUsername","required","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","store","createStore","action","filter","composeWithDevTools","ReactDOM","render","StrictMode","exact","path","component","HomePage","App","getElementById"],"mappings":"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","file":"static/js/main.47ee7139.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const MessageContainer = (props) => {\r\n    return (\r\n        <div className=\"row message\">\r\n            <div className=\"col\">\r\n                <div className=\"row\">\r\n                    <small className=\"username\">{props.user.username}</small>\r\n                </div>\r\n                <div className=\"row \">\r\n                    <p className=\"wrap messageText\">{props.message.body}</p>\r\n                </div>\r\n                <div className=\"row timeStamp\">\r\n                    <small>{props.message.time}</small>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const OwnMessageContainer = (props) => {\r\n    return (\r\n        <div className=\"row ownMessage\">\r\n            <div className=\"col\">\r\n                <div className=\"row\">\r\n                    <p className=\"wrap messageText\">{props.message.body}</p>\r\n                </div>\r\n                <div className=\"row timeStamp\">\r\n                    <small>{props.message.time}</small>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/exit.f0dbdb09.svg\";","export const USER_JOINED = \"USER_JOINED\";\r\nexport const DISCONNECTED = \"DISCONNECTED\";\r\nexport const USER_LEFT = \"USER_LEFT\";\r\nexport const RECEIVED_MSG = \"RECEIVED_MSG\";\r\nexport const CONNECT = \"CONNECT\";\r\nexport const INITIALIZE = \"INITIALIZE\";\r\nexport const JOIN_ROOM = \"JOIN_ROOM\";\r\nexport const IS_TYPING = \"IS_TYPING\";\r\nexport const STOPPED_TYPING = \"STOPPED_TYPING\";\r\n// export const\r\n","import { connect } from \"react-redux\";\r\nimport { MessagesBoxBase } from \"../components/MessagesBox\";\r\nimport { DISCONNECTED } from \"../reducers/actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.messages,\r\n        users: state.users,\r\n        ownUser: state.ownUser,\r\n        roomId: state.roomId,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        disconnect: () => dispatch({ type: DISCONNECTED }),\r\n    };\r\n};\r\n\r\nconst connection = connect(mapStateToProps, mapDispatchToProps);\r\n\r\nconst connectedComponent = connection(MessagesBoxBase);\r\n\r\nexport { connectedComponent as MessagesBox };\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { MessageContainer } from \"./MessageContainer\";\r\nimport { OwnMessageContainer } from \"./OwnMessageContainer\";\r\nimport exit from \"../resources/img/exit.svg\";\r\n\r\nexport const MessagesBoxBase = (props) => {\r\n    const history = useHistory();\r\n    function disconnect() {\r\n        history.push(\"/\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"col messageBox-container\">\r\n            <div className=\"row messageBox-container-header\">\r\n                <div className=\"col\">\r\n                    <p>Room: {props.roomId} </p>\r\n                </div>\r\n                <div className=\"col text-right\">\r\n                    <div className=\"row right text-right\">\r\n                        <p style={{ lineHeight: \"3vh\" }}>\r\n                            {props.users.length}{\" \"}\r\n                            {`${props.users.length === 1 ? \"user\" : \"users\"}`}{\" \"}\r\n                            online\r\n                        </p>\r\n                        <img\r\n                            alt=\"exit-button\"\r\n                            id=\"exit-btn\"\r\n                            src={exit}\r\n                            onClick={disconnect}\r\n                        ></img>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div id=\"messages\" className=\"row \">\r\n                <div className=\"col\">\r\n                    {props.messages.map((msg, i) => {\r\n                        if (msg.user.id === props.ownUser.id) {\r\n                            return (\r\n                                <OwnMessageContainer key={i} message={msg} />\r\n                            );\r\n                        } else {\r\n                            return (\r\n                                <MessageContainer\r\n                                    key={i}\r\n                                    message={msg}\r\n                                    user={msg.user}\r\n                                />\r\n                            );\r\n                        }\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// export const MessagesBoxBase = (props) =>{\r\n//   return (\r\n//       <div id=\"chatbox\" className=\"row messageBox-container\">\r\n//         <div id=\"messages\" className=\"col\">\r\n//           {\r\n//             props.messages.map((msg, i) => {\r\n//               if(msg.user.id === props.ownUser.id){\r\n//                 return (\r\n//                   <OwnMessageContainer key={i} message={msg}/>\r\n//                 );\r\n//               }else{\r\n//                 return (\r\n//                   <MessageContainer key={i} message={msg} user={msg.user}/>\r\n//                 )\r\n//               }\r\n//             }\r\n//             )\r\n//           }\r\n//         </div>\r\n//     </div>\r\n//   );\r\n// }\r\n","import React, { useState } from \"react\";\r\nimport Picker from \"emoji-picker-react\";\r\nexport const EmojiButton = ({ appendEmoji }) => {\r\n    const [isActive, setIsActive] = useState(false);\r\n    return (\r\n        <div className=\"mr-1\">\r\n            {isActive ? (\r\n                <div className=\"d-flex col\">\r\n                    <div className=\"row emojiPicker\">\r\n                        <Picker onEmojiClick={appendEmoji} />\r\n                    </div>\r\n                    <div className=\"row justify-content-end\">\r\n                        <button\r\n                            id=\"emojiBtn\"\r\n                            className=\"btn btn-success\"\r\n                            onClick={(e) => setIsActive(!isActive)}\r\n                        >\r\n                            😀\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <button\r\n                    className=\"btn btn-secondary\"\r\n                    onClick={(e) => setIsActive(!isActive)}\r\n                >\r\n                    😀\r\n                </button>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { EmojiButton } from \"./EmojiButton\";\r\nlet timeout = null;\r\nexport const MessageTextAreaBase = (props) => {\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const sendMessage = (e) => {\r\n        if (e) e.preventDefault();\r\n        if (message.trim().length === 0) return;\r\n        const messageObject = {\r\n            body: message,\r\n            user: props.ownUser,\r\n            roomId: props.roomId,\r\n            date: new Date(),\r\n            time: new Date().toLocaleTimeString(\"en-US\"),\r\n        };\r\n        setMessage(\"\");\r\n        props.socket.current.emit(\"send-msg\", messageObject);\r\n        stoppedTyping();\r\n    };\r\n\r\n    const stoppedTyping = () => {\r\n        props.socket.current.emit(\"clientStoppedTyping\", props.roomId);\r\n        if (timeout) clearTimeout(timeout);\r\n        timeout = null;\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        if (timeout) {\r\n            clearTimeout(timeout);\r\n        } else {\r\n            props.socket.current.emit(\"isTyping\", props.roomId);\r\n        }\r\n        timeout = setTimeout(stoppedTyping, 3000);\r\n        setMessage(e.target.value);\r\n    };\r\n\r\n    const handleKeyDown = (e) => {\r\n        if (e.keyCode === 13 && !e.shiftKey) {\r\n            if (timeout) clearTimeout(timeout);\r\n            sendMessage();\r\n            if (e) e.preventDefault();\r\n        }\r\n    };\r\n\r\n    const onEmojiSelected = (event, emojiObject) => {\r\n        handleChange({ target: { value: message + emojiObject.emoji } });\r\n    };\r\n    return (\r\n        <form\r\n            style={{ alignItems: \"flex-end\" }}\r\n            className=\"row form-inline\"\r\n            onSubmit={sendMessage}\r\n        >\r\n            <textarea\r\n                id=\"msgInput\"\r\n                rows=\"1\"\r\n                className=\"form-control mr-0\"\r\n                value={message}\r\n                onInput={handleChange}\r\n                onKeyDown={handleKeyDown}\r\n                placeholder=\"Write something...\"\r\n            ></textarea>\r\n            <EmojiButton appendEmoji={onEmojiSelected} />\r\n            <button type=\"submit\" className=\"btn btn-primary\">\r\n                Send\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport { MessageTextAreaBase } from \"../components/MessageTextArea\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        socket: state.socket,\r\n        ownUser: state.ownUser,\r\n        roomId: state.roomId,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nconst connection = connect(mapStateToProps, mapDispatchToProps);\r\n\r\nconst connectedComponent = connection(MessageTextAreaBase);\r\n\r\nexport { connectedComponent as MessageTextArea };\r\n","export default __webpack_public_path__ + \"static/media/user.4ad10357.svg\";","import React from \"react\";\r\nimport user from \"../resources/img/user.svg\";\r\n\r\nexport const UserItem = (props) => {\r\n    return (\r\n        <div className=\"userlist-username\">\r\n            <img alt=\"user-icon\" src={user} className=\"avatar\" />\r\n            <span>\r\n                {props.user.username}\r\n                {props.user.isCurrentUser ? \" (You)\" : null}\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport { UserListBase } from \"../components/UserList\";\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        users: state.users,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\nconst connection = connect(mapStateToProps, mapDispatchToProps);\r\n\r\nconst connectedComponent = connection(UserListBase);\r\n\r\nexport { connectedComponent as UserList };\r\n","import React from \"react\";\r\nimport { UserItem } from \"./UserItem\";\r\nexport const UserListBase = (props) => {\r\n    return (\r\n        <div className=\"userList-container\">\r\n            <div className=\"userList\">\r\n                <div id=\"userlist-title\" className=\"row center\">\r\n                    <p>Users</p>\r\n                </div>\r\n                <div id=\"users\">\r\n                    {props.users.map((user, index) => (\r\n                        <UserItem key={index} user={user} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport { App } from \"../App\";\r\nimport {\r\n    CONNECT,\r\n    DISCONNECTED,\r\n    INITIALIZE,\r\n    RECEIVED_MSG,\r\n    USER_JOINED,\r\n    IS_TYPING,\r\n    STOPPED_TYPING,\r\n} from \"../reducers/actions\";\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        users: state.users,\r\n        socketREF: state.socket,\r\n        messages: state.messages,\r\n        roomId: state.roomId,\r\n        ownUser: state.ownUser,\r\n        typingUsers: state.typingUsers,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        disconnect: () => dispatch({ type: DISCONNECTED }),\r\n        connectToServer: (ownUser) =>\r\n            dispatch({ type: CONNECT, payload: ownUser }),\r\n        initialize: (socket) => dispatch({ type: INITIALIZE, payload: socket }),\r\n        receivedMessage: (msg) =>\r\n            dispatch({ type: RECEIVED_MSG, payload: msg }),\r\n        updateUserlist: (userlist) =>\r\n            dispatch({ type: USER_JOINED, payload: userlist }),\r\n        addTypingUser: (typingUser) =>\r\n            dispatch({ type: IS_TYPING, payload: typingUser }),\r\n        removeTypingUser: (id) =>\r\n            dispatch({ type: STOPPED_TYPING, payload: id }),\r\n    };\r\n};\r\n\r\nconst connection = connect(mapStateToProps, mapDispatchToProps);\r\nconst connectedComponent = connection(App);\r\n\r\nexport { connectedComponent as App };\r\n","import React, { useEffect, useRef } from \"react\";\nimport \"./css/App.css\";\nimport io from \"socket.io-client\";\nimport { MessagesBox } from \"./containers/MessagesBox\";\nimport { MessageTextArea } from \"./containers/MessageTextArea\";\nimport { UserList } from \"./containers/UserList\";\nimport { useHistory } from \"react-router-dom\";\nexport const App = (props) => {\n    const history = useHistory();\n    const socketREF = useRef();\n    const usersREF = useRef();\n    const ownUserREF = useRef();\n\n    useEffect(() => {\n        require(\"dotenv\").config();\n        let url =\n            process.env.NODE_ENV !== \"production\"\n                ? \"http://localhost:8000\"\n                : \"https://termtime-live-chat.herokuapp.com\";\n        //if roomId or username is not set, then return to homepage and clear redux state\n        if (!props.roomId || !props.ownUser.username) {\n            history.push(\"/\");\n            props.disconnect();\n            return;\n        }\n\n        socketREF.current = io.connect(url);\n        props.initialize(socketREF);\n        socketREF.current.on(\"own-id\", (id) => {\n            console.log(\n                `received uid ${id} for username ${props.ownUser.username} in room ${props.roomId}`\n            );\n            ownUserREF.current = {\n                username: props.ownUser.username,\n                id: id,\n                room: props.roomId,\n            };\n            props.connectToServer(ownUserREF);\n            socketREF.current.emit(\"presentation\", ownUserREF.current);\n        });\n\n        socketREF.current.on(\"userlist-update\", (updatedUserList) => {\n            let currentUserEntryIndex = updatedUserList.findIndex(\n                (user) => user.id === ownUserREF.current.id\n            );\n            if (currentUserEntryIndex !== -1)\n                updatedUserList[currentUserEntryIndex].isCurrentUser = true;\n            props.updateUserlist(updatedUserList);\n            usersREF.current = updatedUserList;\n        });\n\n        socketREF.current.on(\"msg\", (message) => {\n            receivedMessage(message);\n        });\n\n        socketREF.current.on(\"isTyping\", (id) => {\n            //search user in user array\n            console.log(`${id} is typing...`);\n            var typingUser = usersREF.current.find((obj) => obj.id === id);\n            if (typingUser !== undefined) {\n                props.addTypingUser(typingUser);\n            }\n        });\n\n        socketREF.current.on(\"stoppedTyping\", (id) => {\n            console.log(`${id} stopped typing...`);\n            //search user in user array\n            var stoppedTypingUser = usersREF.current.find(\n                (obj) => obj.id === id\n            );\n            if (stoppedTypingUser !== undefined) {\n                props.removeTypingUser(id);\n            }\n        });\n        return () => {\n            //change something\n            socketREF.current.emit(\"leave\", props.roomId);\n            socketREF.current.close();\n        };\n    }, []);\n    const renderTypingUsers = () => {\n        let string = \"\";\n        if (props.typingUsers.length === 1) {\n            string =\n                props.typingUsers.map((user) => user.username) +\n                \" is typing...\";\n        } else if (props.typingUsers.length > 1) {\n            let usersMinusLast = [\n                ...props.typingUsers.map((user) => user.username),\n            ];\n            usersMinusLast.pop();\n            console.log(usersMinusLast);\n            string =\n                usersMinusLast.join(\",\") +\n                \" and \" +\n                props.typingUsers[usersMinusLast.length].username +\n                \" are typing...\";\n        } else if (props.typingUsers.length > 5) {\n            string = \"Multiple people are typing...\";\n        } else {\n            string = <div>&nbsp;</div>;\n        }\n        return string;\n    };\n    const receivedMessage = (message) => {\n        props.receivedMessage(message);\n        document\n            .querySelector(\"#messages\")\n            .scrollTo(0, document.querySelector(\"#messages\").scrollHeight);\n    };\n    return (\n        <div className=\"flex-container col App \">\n            <div id=\"app\">\n                <div className=\"row\">\n                    <MessagesBox />\n                    <UserList />\n                </div>\n\n                <div id=\"typingStatus\">\n                    <small key=\"users-typing\" className=\"text-white\">\n                        {renderTypingUsers()}\n                    </small>\n                </div>\n                <MessageTextArea />\n            </div>\n        </div>\n    );\n};\n","import { connect } from \"react-redux\";\r\nimport { HomePage } from \"../pages/HomePage\";\r\nimport { JOIN_ROOM } from \"../reducers/actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setRoom: (roomId) => dispatch({ type: JOIN_ROOM, payload: roomId }),\r\n    };\r\n};\r\n\r\nconst connection = connect(mapStateToProps, mapDispatchToProps);\r\n\r\nconst connectedComponent = connection(HomePage);\r\n\r\nexport { connectedComponent as HomePage };\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../css/homePage.css\";\r\n\r\nexport const HomePage = (props) => {\r\n    const history = useHistory();\r\n    const [username, setUsername] = useState(\"\");\r\n    const [room, setRoom] = useState(\"\");\r\n\r\n    function joinRoom(e) {\r\n        if (e) e.preventDefault();\r\n        props.setRoom({ room: room, username: username });\r\n        history.push(\"/room\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"homepage\">\r\n            <div className=\"\">\r\n                <div className=\"homepage-header\">\r\n                    <div className=\"whiteTxt\">\r\n                        <div className=\"row center\">\r\n                            <h1> Welcome to Live-chat!</h1>\r\n                        </div>\r\n                        <div className=\"row center\">\r\n                            <h3> Join chat rooms, and talk to your friends!</h3>\r\n                        </div>\r\n                    </div>\r\n                    <form onSubmit={joinRoom}>\r\n                        <div className=\"offset-2 col-8 \">\r\n                            <div className=\"input-group flex-nowrap\">\r\n                                <div className=\"input-group-prepend\">\r\n                                    <label>\r\n                                        <span className=\"input-group-text\">\r\n                                            Username:\r\n                                        </span>\r\n                                    </label>\r\n                                </div>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    value={username}\r\n                                    onInput={(e) => setUsername(e.target.value)}\r\n                                    placeholder=\"Termtime\"\r\n                                    required\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <br />\r\n                        <div className=\"center form-inline\">\r\n                            <div className=\"input-group\">\r\n                                <div className=\"input-group-prepend\">\r\n                                    <label>\r\n                                        <span className=\"input-group-text\">\r\n                                            Room name:\r\n                                        </span>\r\n                                    </label>\r\n                                </div>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Termtime's room\"\r\n                                    value={room}\r\n                                    onInput={(e) => setRoom(e.target.value)}\r\n                                    required\r\n                                />\r\n                                <div className=\"input-group-append\">\r\n                                    <button\r\n                                        type=\"submit\"\r\n                                        className=\"btn btn-primary\"\r\n                                    >\r\n                                        Join\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                    <br />\r\n                </div>\r\n                <div className=\"homepage-bottom\">\r\n                    <div className=\"row center\">\r\n                        <div className=\"col-3\">\r\n                            <div className=\"card \">\r\n                                <div className=\"card-body text-dark\">\r\n                                    <h3 className=\"card-title \">\r\n                                        <b>What</b> do we do?\r\n                                    </h3>\r\n                                    <hr />\r\n                                    <p>\r\n                                        Offer a free space to chat and talk with\r\n                                        friends or random people about common\r\n                                        topics or interests.\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-3\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body text-dark\">\r\n                                    <h3 className=\"card-title \">\r\n                                        <b>How</b> do we do it?\r\n                                    </h3>\r\n                                    <hr />\r\n                                    <p>\r\n                                        Using Express and Socket.io with rooms\r\n                                        we can connect people through a simple\r\n                                        WebApp.\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-3\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body text-dark\">\r\n                                    <h3 className=\"card-title \">\r\n                                        <b>Why</b> do we do it?\r\n                                    </h3>\r\n                                    <hr />\r\n                                    <p>\r\n                                        Because there is always a need to\r\n                                        explore new and fun ways to use and\r\n                                        apply technology in daily life.\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n    CONNECT,\r\n    DISCONNECTED,\r\n    INITIALIZE,\r\n    JOIN_ROOM,\r\n    RECEIVED_MSG,\r\n    USER_JOINED,\r\n    IS_TYPING,\r\n    STOPPED_TYPING,\r\n} from \"./actions\";\r\nconst INITIAL_STATE = {\r\n    ownUser: {},\r\n    socket: {},\r\n    users: [],\r\n    typingUsers: [],\r\n    messages: [],\r\n    roomId: \"\",\r\n};\r\n\r\nfunction liveChat(state = INITIAL_STATE, action) {\r\n    switch (action.type) {\r\n        case JOIN_ROOM:\r\n            return {\r\n                ...state,\r\n                ownUser: { username: action.payload.username },\r\n                roomId: action.payload.room,\r\n            };\r\n        case DISCONNECTED:\r\n            return INITIAL_STATE;\r\n        case USER_JOINED:\r\n            return {\r\n                ...state,\r\n                users: action.payload,\r\n            };\r\n        case CONNECT:\r\n            return {\r\n                ...state,\r\n                ownUser: action.payload,\r\n            };\r\n        case INITIALIZE:\r\n            return {\r\n                ...state,\r\n                socket: action.payload,\r\n            };\r\n        case IS_TYPING:\r\n            return {\r\n                ...state,\r\n                typingUsers: [...state.typingUsers, action.payload],\r\n            };\r\n        case STOPPED_TYPING:\r\n            return {\r\n                ...state,\r\n                typingUsers: state.typingUsers.filter(\r\n                    (user) => user.id !== action.payload\r\n                ),\r\n            };\r\n        case RECEIVED_MSG:\r\n            return { ...state, messages: [...state.messages, action.payload] };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport { liveChat };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"jquery/dist/jquery\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap.js\";\nimport { App } from \"./containers/App\";\nimport { HomePage } from \"./containers/HomePage\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { createStore } from \"redux\";\nimport { liveChat } from \"./reducers\";\nimport { Provider } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nconst store = createStore(liveChat, composeWithDevTools());\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <Switch>\n                    <Route exact path=\"/\" component={HomePage}></Route>\n                    <Route exact path=\"/room\" component={App}></Route>\n                </Switch>\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}